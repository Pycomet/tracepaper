# Use an official Node.js runtime as a parent image
# Choose a version compatible with your project (e.g., LTS)
FROM node:18-alpine AS development

# Set the working directory in the container
WORKDIR /usr/src/app

# Copy package.json and package-lock.json (or npm-shrinkwrap.json) first
# This leverages Docker layer caching. If these files haven't changed, Docker uses a cached layer.
COPY package.json package-lock.json* ./

# Install project dependencies
# Using npm ci is generally recommended for CI environments as it provides faster, more reliable builds
# It expects a package-lock.json or npm-shrinkwrap.json to exist
RUN npm ci

# Copy the rest of the application code into the container
# This includes src, public, electron, and any config files like tailwind.config.js etc.
COPY . .

# The default command to run when starting the container (e.g., for running tests)
# Using --watchAll=false to ensure tests run once and exit, suitable for CI/automated runs.
# Add any other Jest CLI options as needed.
CMD ["npm", "test", "--", "--watchAll=false"]

# --- You could add a separate stage for building the react app if needed for other purposes ---
# FROM development AS build
# RUN npm run build

# --- And another stage for a production server if you were serving the react app directly ---
# FROM nginx:alpine
# COPY --from=build /usr/src/app/build /usr/share/nginx/html
# EXPOSE 80
# CMD ["nginx", "-g", "daemon off;"] 